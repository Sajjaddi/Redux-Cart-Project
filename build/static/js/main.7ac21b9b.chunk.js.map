{"version":3,"sources":["store/uiSlice.js","components/layout/header/Header.js","store/cartSlice.js","components/layout/menu/MenuItem.js","components/layout/menu/ProductMenu.js","components/layout/notification/Notification.js","components/layout/Product/ProductItem.js","components/layout/Product/ProductList.js","App.js","store/cartAction.js","store/index.js","index.js"],"names":["uiSlice","createSlice","name","initialState","isShowCart","notification","reducers","toggleShow","state","action","showNotification","status","payload","title","message","uiAction","actions","Header","dispatch","useDispatch","useState","btnIsHighlighted","setBtnIsHighlighted","cart","useSelector","useEffect","items","length","timer","setTimeout","clearTimeout","className","onClick","totalQuantity","cartSlice","changed","replaceCart","addItemToCart","newItem","existingItem","find","item","id","quantity","totalPrice","price","push","description","removeItemToCart","filter","console","log","cartAction","MenuItem","toFixed","ProductMenu","map","Notification","notifClass","ProductItem","ProductList","cartItems","App","ui","useLayoutEffect","a","fetchData","fetch","response","ok","Error","json","cartData","sendRequest","method","body","JSON","stringify","sendCartData","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"+MAEMA,EAAUC,YAAY,CACxBC,KAAM,KACNC,aAAc,CAACC,YAAY,EAAOC,aAAc,MAChDC,SAAU,CACNC,WADM,SACMC,EAAMC,GACdD,EAAMJ,YAAcI,EAAMJ,YAE9BM,iBAJM,SAIYF,EAAOC,GACrBD,EAAMH,aAAe,CACjBM,OAAQF,EAAOG,QAAQD,OACvBE,MAAOJ,EAAOG,QAAQC,MACtBC,QAASL,EAAOG,QAAQE,aAM3BC,EAAWf,EAAQgB,QACjBhB,I,OCgBAiB,EAhCA,SAAC,GAAe,IAAbJ,EAAY,EAAZA,MACVK,EAAWC,cACjB,EAAgDC,oBAAS,GAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACMC,EAAOC,aAAY,SAAChB,GAAD,OAAWA,EAAMe,QAe1C,OATAE,qBAAU,WACR,GAA0B,IAAtBF,EAAKG,MAAMC,OAAf,CAGAL,GAAoB,GACpB,IAAMM,EAAQC,YAAW,kBAAMP,GAAoB,KAAQ,KAC3D,OAAO,kBAAMQ,aAAaF,OACzB,CAACL,EAAKG,QAGP,mCACE,6BAAKb,IACL,sBACEkB,UAAS,eAAUV,EAAmB,OAAS,IAC/CW,QAlBgB,WACpBd,EAASH,EAASR,eAehB,UAIE,2CACA,+BAAOgB,EAAKU,uBC5BdC,EAAYjC,YAAY,CAC5BC,KAAM,OACNC,aAAc,CAAEuB,MAAO,GAAIO,cAAe,EAAGE,SAAS,GACtD7B,SAAU,CACR8B,YADQ,SACI5B,EAAOC,GACjBD,EAAMyB,cAAgBxB,EAAOG,QAAQqB,cACrCzB,EAAMkB,MAAQjB,EAAOG,QAAQc,OAE/BW,cALQ,SAKM7B,EAAOC,GACnB,IAAI6B,EAAU7B,EAAOG,QACf2B,EAAe/B,EAAMkB,MAAMc,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAOJ,EAAQI,MACpElC,EAAM2B,SAAU,EAChB3B,EAAMyB,gBACDM,GAUHA,EAAaI,WACbJ,EAAaK,WAAaL,EAAaK,WAAaL,EAAaM,OAVjErC,EAAMkB,MAAMoB,KAAK,CACf5C,KAAMoC,EAAQpC,KACdwC,GAAIJ,EAAQI,GACZK,YAAaT,EAAQS,YACrBF,MAAOP,EAAQO,MACfF,SAAU,EACVC,WAAYN,EAAQO,SAQ1BG,iBAzBQ,SAyBSxC,EAAOC,GACtB,IAAI6B,EAAU9B,EAAMkB,MAAMc,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAOjC,EAAOG,WAC5DJ,EAAMyB,gBACNzB,EAAM2B,SAAU,EACS,IAArBG,EAAQK,SACVnC,EAAMkB,MAAQlB,EAAMkB,MAAMuB,QAAO,SAACR,GAAD,OAAUA,EAAKC,KAAOjC,EAAOG,YAE9DsC,QAAQC,IAAIb,EAAQO,OACpBP,EAAQK,WACRL,EAAQM,WAAaN,EAAQM,WAAaN,EAAQO,WAM7CO,EAAalB,EAAUlB,QACrBkB,ICnBAmB,EAxBE,SAAC,GAAoC,IAAnCnD,EAAkC,EAAlCA,KAAM2C,EAA4B,EAA5BA,MAAOE,EAAqB,EAArBA,YAAaL,EAAQ,EAARA,GACnCxB,EAAWC,cAWjB,OACI,qBAAIY,UAAU,YAAd,UACI,gCACI,6BAAK7B,IACL,qCAAQ2C,EAAMS,QAAQ,SAE1B,wBAAQvB,UAAU,UAAlB,SAA6BgB,IAC7B,wBAAQf,QAhBS,WACrBd,EAASkC,EAAWf,cAAc,CAC9BnC,OACA2C,QACAH,KACAK,kBAWA,6BCHGQ,EAjBK,WAKlB,OACE,0BAASxB,UAAU,eAAnB,UACE,4DACA,6BAPe,CACjB,CAACW,GAAI,KAAMxC,KAAM,gBAAiB6C,YAAa,8BAA+BF,MAAO,GACrF,CAACH,GAAI,KAAMxC,KAAM,iBAAkB6C,YAAa,+BAAgCF,MAAO,IAMvEW,KAAI,SAAAf,GAAI,OAClB,cAAC,EAAD,CAAwBC,GAAID,EAAKC,GAAIxC,KAAMuC,EAAKvC,KAAM2C,MAAOJ,EAAKI,MAAOE,YAAaN,EAAKM,aAA5EN,EAAKC,aCUfe,EAtBM,SAAC,GAA6B,IAA5B9C,EAA2B,EAA3BA,OAAQG,EAAmB,EAAnBA,QAASD,EAAU,EAAVA,MAEhC6C,EAAa,GAQjB,MANc,YAAX/C,EACC+C,EAAY,UACK,UAAX/C,IACN+C,EAAa,SAIb,0BAAS3B,UAAS,uBAAkB2B,GAApC,UACI,mBAAG3B,UAAU,QAAb,SACKlB,IAEL,mBAAGkB,UAAU,OAAb,SACKjB,QCkBF6C,EA/BK,SAAC,GAA+C,IAA7CjB,EAA4C,EAA5CA,GAAIxC,EAAwC,EAAxCA,KAAM2C,EAAkC,EAAlCA,MAAOD,EAA2B,EAA3BA,WAAYD,EAAe,EAAfA,SAC5CzB,EAAWC,cAUjB,OACE,qBAAIY,UAAU,eAAd,UACE,sBAAKA,UAAU,MAAf,UACE,6BAAK7B,IACL,sBAAK6B,UAAU,QAAf,UACE,uBAAMA,UAAU,QAAhB,cAA0Ba,EAAWU,QAAQ,MAC7C,uBAAMvB,UAAU,QAAhB,eAA2Bc,EAAMS,QAAQ,GAAzC,mBAGJ,sBAAKvB,UAAU,SAAf,UACE,uBAAMA,UAAU,WAAhB,cAA6BY,KAC7B,sBAAKZ,UAAU,UAAf,UACE,wBAAQC,QAhBgB,WAC9Bd,EAASkC,EAAWJ,iBAAiBN,KAe/B,eACA,wBAAQV,QArBY,WAC1Bd,EAASkC,EAAWf,cAAc,CAACK,SAoB7B,yBCDKkB,EAvBK,WAClB,IAAMC,EAAYrC,aAAY,qBAAGD,KAAgBG,SAEjD,OACE,0BAASK,UAAU,eAAnB,UACE,oDACA,gCACI8B,EAAUlC,QAAU,sDACrBkC,EAAUL,KAAI,SAACf,GAAD,OACb,cAAC,EAAD,CAEEC,GAAID,EAAKC,GACTG,MAAOJ,EAAKI,MACZ3C,KAAMuC,EAAKvC,KACX0C,WAAYH,EAAKG,WACjBD,SAAUF,EAAKE,UALZF,EAAKC,c,uBC0BLoB,EA/BH,WACV,IAAM1D,EAAaoB,aAAY,qBAAGuC,GAAY3D,cACxCC,EAAemB,aAAY,qBAAGuC,GAAY1D,gBAC1CkB,EAAOC,aAAY,SAAChB,GAAD,OAAWA,EAAMe,QACpCL,EAAWC,cAYjB,OAVA6C,2BAAgB,WACd9C,ECXF,uCAAO,WAAOA,GAAP,iBAAA+C,EAAA,6DACCC,EADD,+BAAAD,EAAA,MACa,4BAAAA,EAAA,sEACOE,MACrB,qFAFc,WACVC,EADU,QAIFC,GAJE,sBAKdnB,QAAQC,IAAIiB,GACN,IAAIE,MAAM,8BANF,uBAQHF,EAASG,OARN,mFADb,uEAaoBL,IAbpB,OAaGM,EAbH,OAcHtD,EACEkC,EAAWhB,YAAY,CACrBV,MAAO8C,EAAS9C,OAAS,GACzBO,cAAeuC,EAASvC,eAAiB,KAjB1C,gDAqBHf,EACEH,EAASL,iBAAiB,CACxBC,OAAQ,QACRG,QAAS,6BACTD,MAAO,YAzBR,yDAAP,yDDYG,CAACK,IAEFO,qBAAU,WACLF,EAAKY,SACNjB,ECgBoB,SAACK,GAC3B,8CAAO,WAAOL,GAAP,eAAA+C,EAAA,6DACL/C,EACEH,EAASL,iBAAiB,CACxBC,OAAQ,UACRG,QAAS,iBACTD,MAAO,aAGL4D,EARD,+BAAAR,EAAA,MAQe,sBAAAA,EAAA,sEACKE,MACrB,oFACA,CACEO,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CACnBnD,MAAOH,EAAKG,MACZO,cAAeV,EAAKU,kBAPR,iBAWJoC,GAXI,sBAYV,IAAIC,MAAM,6BAZA,2CARf,uEAwBGG,IAxBH,OA0BHvD,EACEH,EAASL,iBAAiB,CACxBC,OAAQ,UACRG,QAAS,+BACTD,MAAO,cA9BR,gDAkCHK,EACEH,EAASL,iBAAiB,CACxBC,OAAQ,QACRG,QAAS,4BACTD,MAAO,YAtCR,yDAAP,sDDjBeiE,CAAavD,MAEzB,CAACA,EAAML,IAGR,qCACGb,GACC,cAAC,EAAD,CACEM,OAAQN,EAAaM,OACrBG,QAAST,EAAaS,QACtBD,MAAOR,EAAaQ,QAGxB,cAAC,EAAD,CAAQA,MAAO,cACdT,GAAc,cAAC,EAAD,IACf,cAAC,EAAD,QExBS2E,G,MAPDC,YAAe,CAC3BC,QAAS,CACPlB,GAAI/D,EAAQiF,QACZ1D,KAAMW,EAAU+C,YCApBC,IAASC,OACL,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEJK,SAASC,eAAe,W","file":"static/js/main.7ac21b9b.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst uiSlice = createSlice({\r\n    name: 'ui',\r\n    initialState: {isShowCart: false, notification: null},\r\n    reducers: {\r\n        toggleShow (state,action) {\r\n            state.isShowCart = !state.isShowCart\r\n        },\r\n        showNotification (state, action) {\r\n            state.notification = {\r\n                status: action.payload.status,\r\n                title: action.payload.title,\r\n                message: action.payload.message\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const uiAction = uiSlice.actions\r\nexport default uiSlice;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uiAction } from \"../../../store/uiSlice\";\r\n\r\nconst Header = ({ title }) => {\r\n  const dispatch = useDispatch();\r\n  const [btnIsHighlighted, setBtnIsHighlighted] = useState(false);\r\n  const cart = useSelector((state) => state.cart);\r\n\r\n  const toggleHandler = () => {\r\n    dispatch(uiAction.toggleShow());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (cart.items.length === 0) {\r\n      return;\r\n    }\r\n    setBtnIsHighlighted(true);\r\n    const timer = setTimeout(() => setBtnIsHighlighted(false), 300);\r\n    return () => clearTimeout(timer);\r\n  }, [cart.items]);\r\n\r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n      <div\r\n        className={`cart ${btnIsHighlighted ? \"bump\" : \"\"}`}\r\n        onClick={toggleHandler}\r\n      >\r\n        <span>My Cart</span>\r\n        <span>{cart.totalQuantity}</span>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: { items: [], totalQuantity: 0, changed: false },\r\n  reducers: {\r\n    replaceCart(state, action) {\r\n      state.totalQuantity = action.payload.totalQuantity;\r\n      state.items = action.payload.items;\r\n    },\r\n    addItemToCart(state, action) {\r\n      let newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.changed = true;\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          name: newItem.name,\r\n          id: newItem.id,\r\n          description: newItem.description,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\r\n      }\r\n      // console.log(action);\r\n    },\r\n    removeItemToCart(state, action) {\r\n      let newItem = state.items.find((item) => item.id === action.payload);\r\n      state.totalQuantity--;\r\n      state.changed = true;\r\n      if (newItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== action.payload);\r\n      } else {\r\n        console.log(newItem.price);\r\n        newItem.quantity--;\r\n        newItem.totalPrice = newItem.totalPrice - newItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartAction = cartSlice.actions;\r\nexport default cartSlice;\r\n","import { useDispatch } from \"react-redux\"\r\nimport { cartAction } from \"../../../store/cartSlice\"\r\n\r\nconst MenuItem = ({name, price, description, id}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const addToCartHandler = () => {\r\n        dispatch(cartAction.addItemToCart({\r\n            name,\r\n            price,\r\n            id,\r\n            description\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <li className=\"menu-item\">\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <span>${price.toFixed(2)}</span>\r\n            </div>\r\n            <strong className=\"content\">{description}</strong>\r\n            <button onClick={addToCartHandler}>Add to Cart</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default MenuItem","import MenuItem from \"./MenuItem\";\r\n\r\nconst ProductMenu = () => {\r\n  const DUMMY_ITEM = [\r\n    {id: 'b1', name: 'My First Book', description: 'The first book I ever wrote', price: 6.00},\r\n    {id: 'b2', name: 'My Second Book', description: 'The Second book I ever wrote', price: 8.00}\r\n  ]\r\n  return (\r\n    <section className=\"product-menu\">\r\n      <h2>Buy Your Favorite Products</h2>\r\n      <ul>\r\n        {DUMMY_ITEM.map(item => (\r\n          <MenuItem key={item.id} id={item.id} name={item.name} price={item.price} description={item.description}/>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProductMenu;\r\n","const Notification = ({status, message, title})=> {\r\n\r\n    let notifClass = ''\r\n\r\n    if(status === 'success') {\r\n        notifClass= 'success'\r\n    } else if(status === 'error'){\r\n        notifClass = 'error'\r\n    }\r\n\r\n    return (\r\n        <section className={`notification ${notifClass}`}>\r\n            <p className=\"title\">\r\n                {title}\r\n            </p>\r\n            <p className=\"desc\">\r\n                {message}\r\n            </p>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Notification","import {useDispatch} from 'react-redux'\r\nimport { cartAction } from '../../../store/cartSlice';\r\n\r\nconst ProductItem = ({ id, name, price, totalPrice, quantity }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const addItemToCartHandler =() => {\r\n    dispatch(cartAction.addItemToCart({id}))\r\n  }\r\n\r\n  const removeItemToCartHandler = () => {\r\n    dispatch(cartAction.removeItemToCart(id))\r\n  }\r\n\r\n  return (\r\n    <li className=\"product-item\">\r\n      <div className=\"top\">\r\n        <h3>{name}</h3>\r\n        <div className=\"price\">\r\n          <span className=\"total\">${totalPrice.toFixed(2)}</span>\r\n          <span className=\"price\">(${price.toFixed(2)}/ item)</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom\">\r\n        <span className=\"quantity\">x{quantity}</span>\r\n        <div className=\"buttons\">\r\n          <button onClick={removeItemToCartHandler}>-</button>\r\n          <button onClick={addItemToCartHandler}>+</button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ProductItem;\r\n","import { useSelector } from \"react-redux\";\r\nimport ProductItem from \"./ProductItem\";\r\n\r\nconst ProductList = () => {\r\n  const cartItems = useSelector(({ cart }) => cart.items);\r\n\r\n  return (\r\n    <section className=\"product-list\">\r\n      <h2>Your Shopping Cart</h2>\r\n      <ul>\r\n        {!cartItems.length && <p>Not found any product</p>}\r\n        {cartItems.map((item) => (\r\n          <ProductItem\r\n          key={item.id}\r\n            id={item.id}\r\n            price={item.price}\r\n            name={item.name}\r\n            totalPrice={item.totalPrice}\r\n            quantity={item.quantity}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","import Header from \"./components/layout/header/Header\";\nimport ProductMenu from \"./components/layout/menu/ProductMenu\";\nimport Notification from \"./components/layout/notification/Notification\";\nimport ProductList from \"./components/layout/Product/ProductList\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchCartData, sendCartData } from \"./store/cartAction\";\nimport { useEffect, useLayoutEffect } from \"react\";\n\nconst App = () => {\n  const isShowCart = useSelector(({ ui }) => ui.isShowCart);\n  const notification = useSelector(({ ui }) => ui.notification);\n  const cart = useSelector((state) => state.cart)\n  const dispatch = useDispatch();\n\n  useLayoutEffect(()=> {\n    dispatch(fetchCartData())\n  }, [dispatch])\n\n    useEffect(()=> {\n      if(cart.changed) {\n        dispatch(sendCartData(cart))\n      }\n  }, [cart, dispatch])\n\n  return (\n    <>\n      {notification && (\n        <Notification\n          status={notification.status}\n          message={notification.message}\n          title={notification.title}\n        />\n      )}\n      <Header title={\"ReduxCart\"} />\n      {isShowCart && <ProductList />}\n      <ProductMenu />\n    </>\n  );\n};\nexport default App;\n","import { cartAction } from \"./cartSlice\";\r\nimport { uiAction } from \"./uiSlice\";\r\n\r\nexport const fetchCartData = () => {\r\n  return async (dispatch) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-cart-87fd0-default-rtdb.europe-west1.firebasedatabase.app/cart.json\"\r\n      );\r\n      if (!response.ok) {\r\n        console.log(response);\r\n        throw new Error(\"Could not fetch cart data!\");\r\n      }\r\n      return await response.json();\r\n    };\r\n\r\n    try {\r\n      const cartData = await fetchData();\r\n      dispatch(\r\n        cartAction.replaceCart({\r\n          items: cartData.items || [],\r\n          totalQuantity: cartData.totalQuantity || 0,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiAction.showNotification({\r\n          status: \"error\",\r\n          message: \"Fetching cart data failed!\",\r\n          title: \"Error!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport const sendCartData = (cart) => {\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiAction.showNotification({\r\n        status: \"pending\",\r\n        message: \"Please wait...\",\r\n        title: \"pending\",\r\n      })\r\n    );\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-cart-87fd0-default-rtdb.europe-west1.firebasedatabase.app/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            items: cart.items,\r\n            totalQuantity: cart.totalQuantity,\r\n          }),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending cart data failed.\");\r\n      }\r\n    };\r\n    try {\r\n      await sendRequest();\r\n\r\n      dispatch(\r\n        uiAction.showNotification({\r\n          status: \"success\",\r\n          message: \"Sent cart data successfully!\",\r\n          title: \"Success!\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiAction.showNotification({\r\n          status: \"error\",\r\n          message: \"Sending cart data failed.\",\r\n          title: \"Error!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport cartSlice from \"./cartSlice\";\r\nimport uiSlice from \"./uiSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    ui: uiSlice.reducer,\r\n    cart: cartSlice.reducer\r\n  },\r\n});\r\n\r\nexport default store","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './assets/css/style.min.css'\nimport {Provider} from 'react-redux'\nimport store from './store/index'\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}